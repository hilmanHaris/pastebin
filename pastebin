namespace WinFormsApp1
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            textBox1.Text = removeTag(textBox1.Text, "[[STARTHERE]]", "[[ENDHERE]]");
        }

        private string removeTag(string input, string startTag, string endTag)
        {
            string result = input;

            int startTagIdx = input.IndexOf(startTag);
            int endTagIdx = input.LastIndexOf(endTag) + endTag.Length;
            if (startTagIdx > 0 && endTagIdx > startTagIdx)
            {
                result = input.Substring(0, startTagIdx);
                result += input.Substring(endTagIdx, input.Length - endTagIdx);
            }

            return result;
        }
    }
}


--------------------------

public class Map<T1, T2>
{
    private Dictionary<T1, T2> _forward = new Dictionary<T1, T2>();
    private Dictionary<T2, T1> _reverse = new Dictionary<T2, T1>();

    public Map()
    {
        this.Forward = new Indexer<T1, T2>(_forward);
        this.Reverse = new Indexer<T2, T1>(_reverse);
    }

    public class Indexer<T3, T4>
    {
        private Dictionary<T3, T4> _dictionary;
        public Indexer(Dictionary<T3, T4> dictionary)
        {
            _dictionary = dictionary;
        }
        public T4 this[T3 index]
        {
            get { return _dictionary[index]; }
            set { _dictionary[index] = value; }
        }
    }

    public void Add(T1 t1, T2 t2)
    {
        _forward.Add(t1, t2);
        _reverse.Add(t2, t1);
    }

    public Indexer<T1, T2> Forward { get; private set; }
    public Indexer<T2, T1> Reverse { get; private set; }
}



------------------------


RSAEncryption rsa = new RSAEncryption(HashAlgorithmName.SHA256, Encoding.UTF8, _rsaSettings.RSAPrivateKeyForDB);
"RSAPublicKeyForDB": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr0p+aeVV5w6yJMaWaGmvUKtTKA3D27PHfuzrMTQwI93xhXBxQqIybk+oLpX7a8aN8x27FeHHZrXqhAKilZp5vmtnLpRQh52zJ4LgiwfRX3W2BYPyWiiMfJo+BlQuZP4cqztqWLx4UI0ZQGhlAtDNlrVUoX2oT8JH9CNkS5bdkSbTCURxk3taK8z9FdBFz1PSNBBOZx7phrkznnOrF+4SW2AvbOdZx3fMst0Ae/JrcColqcHCJztklWB8pR0wiaEz57PdHYtd8Ju89wkJuWOHrJZZ1Xjfeakhv6Rb4TJQCCjKD+AjudZqOuzlyHvW3Q2JIl4vReoQkov4m3+ey3dj4wIDAQAB",
"RSAPrivateKeyForDB": "MIIEowIBAAKCAQEAr0p+aeVV5w6yJMaWaGmvUKtTKA3D27PHfuzrMTQwI93xhXBxQqIybk+oLpX7a8aN8x27FeHHZrXqhAKilZp5vmtnLpRQh52zJ4LgiwfRX3W2BYPyWiiMfJo+BlQuZP4cqztqWLx4UI0ZQGhlAtDNlrVUoX2oT8JH9CNkS5bdkSbTCURxk3taK8z9FdBFz1PSNBBOZx7phrkznnOrF+4SW2AvbOdZx3fMst0Ae/JrcColqcHCJztklWB8pR0wiaEz57PdHYtd8Ju89wkJuWOHrJZZ1Xjfeakhv6Rb4TJQCCjKD+AjudZqOuzlyHvW3Q2JIl4vReoQkov4m3+ey3dj4wIDAQABAoIBAEN6zPFdLNWXDbMkk9A8JxZJ7eg0bFqOedT9xYiai5GzJf/1ilRZdkqK9baBXFlgBVM69cN1uDps+4u4K/ilkApi9ES1Kc8bQVWLh39eEhbKjLjQ06Iri/GHuyrai0WroUO1yrnATBzORJNL3N7ZnNtQkPTeF8Ykh2iPm1OSD1eJ08iw6a/U3tbzaK/kKJ7Xk/Qb74v+dUsZF/Rmfj7rCpWS/WP1sVxdAlhev4E7aECTZIxfvO6aG/JQ8pm8PH+m6a9MvjyAXOwkLgHg+X7gKV4eYjmYSt/JdxxufHORI0yGTWpGajCD57+wNE0mxflizDyHzXin6nc6vqMWKVoLoZECgYEA6Sbi+wOwl1tWTBhteYWW9kUhOJTLIIsOWPJgDEEhGjYYhCI7vJfCjcA9L9QARS1nWhVV7Jd+em37mAgAGaqpFbl8OK9uxJB1dCTG8CUcUGxJ6hER5L8urbqgPSryOChPsE+/FRHllQtY57sAC/ZVfWojytk2LDrdIBWI2YufbckCgYEAwHgK7NvO37cFv4mhQhCbmWHKH34Q7FmdcwujFUVzjGNIY9D8bpnFeVcW3I8JKHZ+g7NOUtAxDWFQh1r6DzDXc3wSQ+isAMykC6d/qx6ylueTRQnFvOwDRu/x20D2+ZbAspHE2z3aM8AXyEzUsyU3iYT8LkFHj4/6CWx00BBlaksCgYAoZH5KcpczgbVvtYOx2/0NaWiZ/t06JB02N7eAKABuJBUXPz8OK1SfbkCrepUZZwZSywN5270jxM4jxq8Nw01L4DivMWWFVGmk14JHtIY1QK2FibOJ571Uh9KfBkO0ivdTWl2GbvVRXwfmDbWyXNjuw2a0C/GgtAn/NvvghJn4UQKBgFhcxGdJ4whCdpkhDq/OACHDC5C5x/s6iVawGQdDA3GIg0uQPtRoNIkouo43/PResma0g1jxzBNggiAiXHts6P1UEO6se4tCaG4RUEO3rDYryyj++5FoqXh/4IHQqZKc64sP8VjWZL8tib2jyGMWyxCPxVdXEQuQBjMdX+PGI0lRAoGBAMWueCDV9NejjtUE+9SYyaL3FGbmUVwtkjNLvDEZRDyOp8X0UPboR6dF5Z2vLORZOSXcoRutItBWHLS/Z+tA9ODLP7jst21QTz8sgcrNDgVxvoGT+BzJm2N87aUo8rGeqRE4wlBPKnZihW3U6KgcZNMkUQd0nnNzohQ7ZdKxG6lY"



#!/bin/sh
SERVICE_NAME=ms-ecm-bulk
PATH_TO_JAR=/home/admin/ms-ecm-bulk-1.0.0.jar
PID_PATH_NAME=/home/admin/ms-ecm-bulk
case $1 in
    start)
        echo "Starting $SERVICE_NAME ..."
        if [ ! -f $PID_PATH_NAME ]; then
            nohup java -jar $PATH_TO_JAR >> /home/admin/ms-ecm-bulk.log &
            echo $! > $PID_PATH_NAME
            echo "$SERVICE_NAME started ..."
        else
            echo "$SERVICE_NAME is already running ..."
        fi
    ;;
    stop)
        if [ -f $PID_PATH_NAME ]; then
            PID=$(cat $PID_PATH_NAME);
            echo "$SERVICE_NAME stoping ..."
            kill $PID;
            echo "$SERVICE_NAME stopped ..."
            rm $PID_PATH_NAME
        else
            echo "$SERVICE_NAME is not running ..."
        fi
    ;;
    restart)
        if [ -f $PID_PATH_NAME ]; then
            PID=$(cat $PID_PATH_NAME);
            echo "$SERVICE_NAME stopping ...";
            kill $PID;
            echo "$SERVICE_NAME stopped ...";
            rm $PID_PATH_NAME
            echo "$SERVICE_NAME starting ..."
            nohup java -jar $PATH_TO_JAR >> /home/admin/ms-ecm-bulk.log &
            echo $! > $PID_PATH_NAME
            echo "$SERVICE_NAME started ..."
        else
            echo "$SERVICE_NAME is not running ..."
        fi
    ;;
esac


------------------------------

[Unit]
Description=My Java Program

[Service]
Type=simple
ExecStart=/usr/bin/java -jar /home/admin/ms-ecm-bulk.jar
WorkingDirectory=/home/admin
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target


------------------------------
package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"sync"
	"time"

	"github.com/Shopify/sarama"
)

func main() {
	// Set up configuration for consumer group
	config := sarama.NewConfig()
	config.Consumer.Group.Rebalance.Strategy = sarama.BalanceStrategyRoundRobin
	config.Consumer.Offsets.Initial = sarama.OffsetOldest

	// Create consumer group
	group, err := sarama.NewConsumerGroup([]string{"localhost:9092"}, "my-group", config)
	if err != nil {
		log.Fatalln("Error creating consumer group:", err)
	}
	defer func() {
		if err := group.Close(); err != nil {
			log.Fatalln("Error closing consumer group:", err)
		}
	}()

	// Create a channel to receive messages
	messages := make(chan *task)

	// Define a handler function for processing messages and putting them into the channel
	handler := customConsumerGroupHandler{messages: messages}

	// Start the consumer group
	go func() {
		for {
			err := group.Consume(context.Background(), []string{"my-topic"}, handler)
			if err != nil {
				log.Fatalln("Error consuming messages:", err)
			}
		}
	}()

	// Create a channel to receive termination signal
	terminate := make(chan os.Signal, 1)
	signal.Notify(terminate, os.Interrupt)

	// Create a channel to signal when all messages have been processed
	allDone := make(chan bool)

	// Create multiple workers to consume messages from the channel
	numWorkers := 5
	var wg sync.WaitGroup

	for i := 0; i < numWorkers; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for message := range messages {
				if err := processMessage(message.message); err != nil {
					log.Println("Error processing message:", err)
				} else {
					message.session.MarkMessage(message.message, "")
				}
			}
		}()
	}

	// Listen for termination signal
	go func() {
		<-terminate
		log.Println("Termination signal received. Waiting for workers to finish...")
		// Wait for all messages to be processed
		wg.Wait()
		log.Println("All messages processed. Shutting down...")
		allDone <- true
	}()

	// Wait for allDone signal
	<-allDone
}

func processMessage(message *sarama.ConsumerMessage) error {
	fmt.Printf("Received message: %s\n", message.Value)
	// Simulate message processing time
	time.Sleep(time.Second)
	return nil
}

type task struct {
	session sarama.ConsumerGroupSession
	message *sarama.ConsumerMessage
}

type customConsumerGroupHandler struct {
	messages chan *task
}

func (customConsumerGroupHandler) Setup(sarama.ConsumerGroupSession) error   { return nil }
func (customConsumerGroupHandler) Cleanup(sarama.ConsumerGroupSession) error { return nil }
func (h customConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {
	for message := range claim.Messages() {
		h.messages <- &task{message: message, session: session}
	}
	return nil
}
