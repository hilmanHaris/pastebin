namespace WinFormsApp1
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            textBox1.Text = removeTag(textBox1.Text, "[[STARTHERE]]", "[[ENDHERE]]");
        }

        private string removeTag(string input, string startTag, string endTag)
        {
            string result = input;

            int startTagIdx = input.IndexOf(startTag);
            int endTagIdx = input.LastIndexOf(endTag) + endTag.Length;
            if (startTagIdx > 0 && endTagIdx > startTagIdx)
            {
                result = input.Substring(0, startTagIdx);
                result += input.Substring(endTagIdx, input.Length - endTagIdx);
            }

            return result;
        }
    }
}


--------------------------

public class Map<T1, T2>
{
    private Dictionary<T1, T2> _forward = new Dictionary<T1, T2>();
    private Dictionary<T2, T1> _reverse = new Dictionary<T2, T1>();

    public Map()
    {
        this.Forward = new Indexer<T1, T2>(_forward);
        this.Reverse = new Indexer<T2, T1>(_reverse);
    }

    public class Indexer<T3, T4>
    {
        private Dictionary<T3, T4> _dictionary;
        public Indexer(Dictionary<T3, T4> dictionary)
        {
            _dictionary = dictionary;
        }
        public T4 this[T3 index]
        {
            get { return _dictionary[index]; }
            set { _dictionary[index] = value; }
        }
    }

    public void Add(T1 t1, T2 t2)
    {
        _forward.Add(t1, t2);
        _reverse.Add(t2, t1);
    }

    public Indexer<T1, T2> Forward { get; private set; }
    public Indexer<T2, T1> Reverse { get; private set; }
}



------------------------


RSAEncryption rsa = new RSAEncryption(HashAlgorithmName.SHA256, Encoding.UTF8, _rsaSettings.RSAPrivateKeyForDB);
"RSAPublicKeyForDB": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr0p+aeVV5w6yJMaWaGmvUKtTKA3D27PHfuzrMTQwI93xhXBxQqIybk+oLpX7a8aN8x27FeHHZrXqhAKilZp5vmtnLpRQh52zJ4LgiwfRX3W2BYPyWiiMfJo+BlQuZP4cqztqWLx4UI0ZQGhlAtDNlrVUoX2oT8JH9CNkS5bdkSbTCURxk3taK8z9FdBFz1PSNBBOZx7phrkznnOrF+4SW2AvbOdZx3fMst0Ae/JrcColqcHCJztklWB8pR0wiaEz57PdHYtd8Ju89wkJuWOHrJZZ1Xjfeakhv6Rb4TJQCCjKD+AjudZqOuzlyHvW3Q2JIl4vReoQkov4m3+ey3dj4wIDAQAB",
"RSAPrivateKeyForDB": "MIIEowIBAAKCAQEAr0p+aeVV5w6yJMaWaGmvUKtTKA3D27PHfuzrMTQwI93xhXBxQqIybk+oLpX7a8aN8x27FeHHZrXqhAKilZp5vmtnLpRQh52zJ4LgiwfRX3W2BYPyWiiMfJo+BlQuZP4cqztqWLx4UI0ZQGhlAtDNlrVUoX2oT8JH9CNkS5bdkSbTCURxk3taK8z9FdBFz1PSNBBOZx7phrkznnOrF+4SW2AvbOdZx3fMst0Ae/JrcColqcHCJztklWB8pR0wiaEz57PdHYtd8Ju89wkJuWOHrJZZ1Xjfeakhv6Rb4TJQCCjKD+AjudZqOuzlyHvW3Q2JIl4vReoQkov4m3+ey3dj4wIDAQABAoIBAEN6zPFdLNWXDbMkk9A8JxZJ7eg0bFqOedT9xYiai5GzJf/1ilRZdkqK9baBXFlgBVM69cN1uDps+4u4K/ilkApi9ES1Kc8bQVWLh39eEhbKjLjQ06Iri/GHuyrai0WroUO1yrnATBzORJNL3N7ZnNtQkPTeF8Ykh2iPm1OSD1eJ08iw6a/U3tbzaK/kKJ7Xk/Qb74v+dUsZF/Rmfj7rCpWS/WP1sVxdAlhev4E7aECTZIxfvO6aG/JQ8pm8PH+m6a9MvjyAXOwkLgHg+X7gKV4eYjmYSt/JdxxufHORI0yGTWpGajCD57+wNE0mxflizDyHzXin6nc6vqMWKVoLoZECgYEA6Sbi+wOwl1tWTBhteYWW9kUhOJTLIIsOWPJgDEEhGjYYhCI7vJfCjcA9L9QARS1nWhVV7Jd+em37mAgAGaqpFbl8OK9uxJB1dCTG8CUcUGxJ6hER5L8urbqgPSryOChPsE+/FRHllQtY57sAC/ZVfWojytk2LDrdIBWI2YufbckCgYEAwHgK7NvO37cFv4mhQhCbmWHKH34Q7FmdcwujFUVzjGNIY9D8bpnFeVcW3I8JKHZ+g7NOUtAxDWFQh1r6DzDXc3wSQ+isAMykC6d/qx6ylueTRQnFvOwDRu/x20D2+ZbAspHE2z3aM8AXyEzUsyU3iYT8LkFHj4/6CWx00BBlaksCgYAoZH5KcpczgbVvtYOx2/0NaWiZ/t06JB02N7eAKABuJBUXPz8OK1SfbkCrepUZZwZSywN5270jxM4jxq8Nw01L4DivMWWFVGmk14JHtIY1QK2FibOJ571Uh9KfBkO0ivdTWl2GbvVRXwfmDbWyXNjuw2a0C/GgtAn/NvvghJn4UQKBgFhcxGdJ4whCdpkhDq/OACHDC5C5x/s6iVawGQdDA3GIg0uQPtRoNIkouo43/PResma0g1jxzBNggiAiXHts6P1UEO6se4tCaG4RUEO3rDYryyj++5FoqXh/4IHQqZKc64sP8VjWZL8tib2jyGMWyxCPxVdXEQuQBjMdX+PGI0lRAoGBAMWueCDV9NejjtUE+9SYyaL3FGbmUVwtkjNLvDEZRDyOp8X0UPboR6dF5Z2vLORZOSXcoRutItBWHLS/Z+tA9ODLP7jst21QTz8sgcrNDgVxvoGT+BzJm2N87aUo8rGeqRE4wlBPKnZihW3U6KgcZNMkUQd0nnNzohQ7ZdKxG6lY"



#!/bin/sh
SERVICE_NAME=ms-ecm-bulk
PATH_TO_JAR=/home/admin/ms-ecm-bulk-1.0.0.jar
PID_PATH_NAME=/home/admin/ms-ecm-bulk
case $1 in
    start)
        echo "Starting $SERVICE_NAME ..."
        if [ ! -f $PID_PATH_NAME ]; then
            nohup java -jar $PATH_TO_JAR >> /home/admin/ms-ecm-bulk.log &
            echo $! > $PID_PATH_NAME
            echo "$SERVICE_NAME started ..."
        else
            echo "$SERVICE_NAME is already running ..."
        fi
    ;;
    stop)
        if [ -f $PID_PATH_NAME ]; then
            PID=$(cat $PID_PATH_NAME);
            echo "$SERVICE_NAME stoping ..."
            kill $PID;
            echo "$SERVICE_NAME stopped ..."
            rm $PID_PATH_NAME
        else
            echo "$SERVICE_NAME is not running ..."
        fi
    ;;
    restart)
        if [ -f $PID_PATH_NAME ]; then
            PID=$(cat $PID_PATH_NAME);
            echo "$SERVICE_NAME stopping ...";
            kill $PID;
            echo "$SERVICE_NAME stopped ...";
            rm $PID_PATH_NAME
            echo "$SERVICE_NAME starting ..."
            nohup java -jar $PATH_TO_JAR >> /home/admin/ms-ecm-bulk.log &
            echo $! > $PID_PATH_NAME
            echo "$SERVICE_NAME started ..."
        else
            echo "$SERVICE_NAME is not running ..."
        fi
    ;;
esac


------------------------------

[Unit]
Description=My Java Program

[Service]
Type=simple
ExecStart=/usr/bin/java -jar /home/admin/ms-ecm-bulk.jar
WorkingDirectory=/home/admin
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target


------------------------------

import (
    "context"
    "database/sql"
    "fmt"
    "time"

    "github.com/XSAM/otelsql"
    "github.com/XSAM/otelsql/jaeger"
    "github.com/jmoiron/sqlx"
    "go.opentelemetry.io/otel/api/global"
    "go.opentelemetry.io/otel/attribute"
    "go.opentelemetry.io/otel/exporters/trace/jaeger"
    "go.opentelemetry.io/otel/sdk/resource"
    "go.opentelemetry.io/otel/sdk/trace"
    "go.opentelemetry.io/otel/semconv"
    "go.uber.org/zap"
    _ "github.com/lib/pq"
)

func main() {
    // Initialize a tracer provider
    tp := trace.NewTracerProvider(
        trace.WithResource(resource.NewWithAttributes(
            semconv.SchemaURL,
            attribute.String("service.name", "my-service"),
        )),
        trace.WithSampler(trace.AlwaysSample()),
        trace.WithBatcher(jaeger.NewExportPipeline(
            jaeger.WithCollectorEndpoint("http://localhost:14268/api/traces"),
            jaeger.WithProcess(jaeger.Process{
                ServiceName: "my-service",
            }),
        )),
    )
    global.SetTracerProvider(tp)

    // Set up logging
    logger, _ := zap.NewDevelopment()
    defer logger.Sync()

    // Create a database connection
    dsn := "user=postgres dbname=mydb password=mypass host=localhost sslmode=disable"
    db, err := sqlx.Connect("postgres", dsn)
    if err != nil {
        logger.Error("Failed to open database connection", zap.Error(err))
        return
    }
    defer db.Close()

    // Wrap the database connection with the otelsql driver
    driverName := "otelsql-pq"
    driver := otelsql.Wrap(sqlx.NewDb(db.DB, driverName))

    // Set attributes for all spans
    attr := semconv.DBSystemPostgreSQL.Value("mydb")
    otelsql.SetDBAttributes(attr)

    // Use the database connection as usual, now using sqlx
    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
    defer cancel()

    var count int
    if err := driver.QueryRowContext(ctx, "SELECT COUNT(*) FROM mytable").Scan(&count); err != nil {
        logger.Error("Failed to execute query", zap.Error(err))
        return
    }
    logger.Info("Result", zap.Int("count", count))
}
